import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from docx import Document
from io import BytesIO
import base64
import os

def formatar_nome_cientifico(nome):
    """Abrevia a primeira palavra e mant√©m a segunda para nome cient√≠fico."""
    palavras = nome.split()
    if len(palavras) >= 2:
        return f"{palavras[0][0]}. {palavras[1]}"
    return nome

def processar_dados(uploaded_file):
    """Processa os dados do arquivo e gera estat√≠sticas."""
    df = pd.read_excel(uploaded_file)
    df = df.rename(columns={"scientific.name": "Esp√©cie", "CAP": "Di√¢metro (cm)", "HT": "Altura (m)"})
    
    # Converter colunas para num√©rico (evitar erro de string)
    df['Di√¢metro (cm)'] = pd.to_numeric(df['Di√¢metro (cm)'], errors='coerce')
    df['Altura (m)'] = pd.to_numeric(df['Altura (m)'], errors='coerce')
    
    # Remover linhas com valores nulos ap√≥s convers√£o
    df = df.dropna(subset=['Di√¢metro (cm)', 'Altura (m)'])
    
    df['Volume (m¬≥)'] = np.pi * (df['Di√¢metro (cm)'] / 200) ** 2 * df['Altura (m)']
    estatisticas = df.describe().T
    return df, estatisticas

def gerar_relatorio(df, estatisticas):
    """Gera um relat√≥rio em Word com os resultados, incluindo gr√°ficos."""
    doc = Document()
    doc.add_heading('Relat√≥rio de Invent√°rio Florestal', level=1)
    doc.add_paragraph("Este relat√≥rio apresenta os resultados do invent√°rio florestal realizado.")
    doc.add_heading('1. Estat√≠sticas Gerais', level=2)
    for col in estatisticas.index:
        doc.add_paragraph(f"{col}: {estatisticas.loc[col, 'mean']:.2f}")
    
    # Gerar gr√°ficos e salvar como imagens tempor√°rias
    plt.style.use('default')  # Fundo branco
    
    fig, ax = plt.subplots(figsize=(6, 4))
    df['Di√¢metro (cm)'].hist(bins=15, color='green', alpha=0.7, edgecolor='black')
    df['Di√¢metro (cm)'].plot(kind='kde', ax=ax, secondary_y=False, color='red')
    plt.xlabel("Di√¢metro (cm)")
    plt.ylabel("Frequ√™ncia")
    plt.title("Distribui√ß√£o Diam√©trica")
    diametro_path = "diametro_plot.png"
    plt.savefig(diametro_path, bbox_inches='tight', dpi=300)
    doc.add_picture(diametro_path, width=5000000, height=3000000)
    
    fig, ax = plt.subplots(figsize=(6, 4))
    especies_formatadas = df['Esp√©cie'].value_counts().nlargest(10)
    especies_formatadas.index = especies_formatadas.index.map(formatar_nome_cientifico)
    especies_formatadas.plot(kind='bar', color='blue', alpha=0.7, edgecolor='black')
    plt.xlabel("Esp√©cie", fontsize=10, fontstyle='italic')
    plt.ylabel("Quantidade")
    plt.title("Abund√¢ncia de Esp√©cies")
    plt.xticks(rotation=45, ha='right', fontsize=10, fontstyle='italic')
    especies_path = "especies_plot.png"
    plt.savefig(especies_path, bbox_inches='tight', dpi=300)
    doc.add_picture(especies_path, width=5000000, height=3000000)
    
    buffer = BytesIO()
    doc.save(buffer)
    return buffer.getvalue()

def download_link(content, filename, label):
    """Cria um link de download para o arquivo gerado."""
    b64 = base64.b64encode(content).decode()
    href = f'<a href="data:file/docx;base64,{b64}" download="{filename}">{label}</a>'
    return href

# Criando a Interface
st.title("Gerador de Relat√≥rios Ambientais")
st.write("Fa√ßa upload de um arquivo Excel contendo os dados do invent√°rio florestal.")

uploaded_file = st.file_uploader("Envie seu arquivo", type=["xlsx"])
if uploaded_file is not None:
    df, estatisticas = processar_dados(uploaded_file)
    st.write("Pr√©via dos dados:")
    st.dataframe(df.head())
    
    st.write("Estat√≠sticas Calculadas:")
    st.dataframe(estatisticas)
    
    # Adicionar visualiza√ß√£o de gr√°ficos no Streamlit
    st.write("### Distribui√ß√£o dos Di√¢metros das √Årvores")
    fig, ax = plt.subplots(figsize=(6, 4))
    df['Di√¢metro (cm)'].hist(bins=15, color='green', alpha=0.7, edgecolor='black')
    df['Di√¢metro (cm)'].plot(kind='kde', ax=ax, secondary_y=False, color='red')
    plt.xlabel("Di√¢metro (cm)")
    plt.ylabel("Frequ√™ncia")
    plt.title("Distribui√ß√£o Diam√©trica")
    st.pyplot(fig)
    
    st.write("### Abund√¢ncia de Esp√©cies")
    fig, ax = plt.subplots(figsize=(6, 4))
    especies_formatadas = df['Esp√©cie'].value_counts().nlargest(10)
    especies_formatadas.index = especies_formatadas.index.map(formatar_nome_cientifico)
    especies_formatadas.plot(kind='bar', color='blue', alpha=0.7, edgecolor='black')
    plt.xlabel("Esp√©cie", fontsize=10, fontstyle='italic')
    plt.ylabel("Quantidade")
    plt.title("Abund√¢ncia de Esp√©cies")
    plt.xticks(rotation=45, ha='right', fontsize=10, fontstyle='italic')
    st.pyplot(fig)
    
    if st.button("Gerar Relat√≥rio"):
        relatorio_content = gerar_relatorio(df, estatisticas)
        st.markdown(download_link(relatorio_content, "Relatorio_Inventario.docx", "üìÑ Baixar Relat√≥rio"), unsafe_allow_html=True)
