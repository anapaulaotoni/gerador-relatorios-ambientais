import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from docx import Document
from io import BytesIO
import base64
import os
import scipy.stats as stats

def formatar_nome_cientifico(nome):
    """Abrevia a primeira palavra e mant칠m a segunda para nome cient칤fico."""
    palavras = nome.split()
    if len(palavras) >= 2:
        return f"{palavras[0][0]}. {palavras[1]}"
    return nome

def processar_dados(uploaded_file):
    """Processa os dados do arquivo e gera estat칤sticas."""
    df = pd.read_excel(uploaded_file)
    df = df.rename(columns={"scientific.name": "Esp칠cie", "CAP": "Di칙metro (cm)", "HT": "Altura (m)"})
    
    # Converter colunas para num칠rico (evitar erro de string)
    df['Di칙metro (cm)'] = pd.to_numeric(df['Di칙metro (cm)'], errors='coerce')
    df['Altura (m)'] = pd.to_numeric(df['Altura (m)'], errors='coerce')
    
    # Remover linhas com valores nulos ap칩s convers칚o
    df = df.dropna(subset=['Di칙metro (cm)', 'Altura (m)'])
    
    df['Volume (m췁)'] = np.pi * (df['Di칙metro (cm)'] / 200) ** 2 * df['Altura (m)']
    estatisticas = df.describe().T
    return df, estatisticas

def gerar_perfil_esquematico(df):
    """Gera um gr치fico de perfil esquem치tico da floresta."""
    fig, ax = plt.subplots(figsize=(8, 5))
    
    # Criando distribui칞칚o aleat칩ria para posi칞칚o das 치rvores
    np.random.seed(42)
    df['x_pos'] = np.random.uniform(0, 10, df.shape[0])
    
    # Desenhando 치rvores como c칤rculos proporcionais
    for _, row in df.iterrows():
        circle = plt.Circle((row['x_pos'], 0), row['Di칙metro (cm)']/50, color='green', alpha=0.7)
        ax.add_patch(circle)
        ax.plot([row['x_pos'], row['x_pos']], [0, row['Altura (m)']], color='brown', linewidth=2)
    
    ax.set_xlim(0, 10)
    ax.set_ylim(0, df['Altura (m)'].max() + 2)
    ax.set_xlabel("Posi칞칚o das 츼rvores")
    ax.set_ylabel("Altura (m)")
    ax.set_title("Perfil Esquem치tico da Comunidade Florestal")
    ax.grid(False)
    
    plt.savefig("perfil_esquematico.png", bbox_inches='tight', dpi=300)
    return "perfil_esquematico.png"

def gerar_relatorio(df, estatisticas):
    """Gera um relat칩rio em Word com os resultados, incluindo gr치ficos."""
    doc = Document()
    doc.add_heading('Relat칩rio de Invent치rio Florestal', level=1)
    doc.add_paragraph("Este relat칩rio apresenta os resultados do invent치rio florestal realizado.")
    doc.add_heading('1. Estat칤sticas Gerais', level=2)
    for col in estatisticas.index:
        doc.add_paragraph(f"{col}: {estatisticas.loc[col, 'mean']:.2f}")
    
    # Adicionar Perfil Esquem치tico
    perfil_path = gerar_perfil_esquematico(df)
    doc.add_picture(perfil_path, width=5000000, height=3000000)
    
    buffer = BytesIO()
    doc.save(buffer)
    return buffer.getvalue()

def download_link(content, filename, label):
    """Cria um link de download para o arquivo gerado."""
    b64 = base64.b64encode(content).decode()
    href = f'<a href="data:file/docx;base64,{b64}" download="{filename}">{label}</a>'
    return href

# Criando a Interface
st.title("Gerador de Relat칩rios Ambientais")
st.write("Fa칞a upload de um arquivo Excel contendo os dados do invent치rio florestal.")

uploaded_file = st.file_uploader("Envie seu arquivo", type=["xlsx"])
if uploaded_file is not None:
    df, estatisticas = processar_dados(uploaded_file)
    st.write("Pr칠via dos dados:")
    st.dataframe(df.head())
    
    st.write("Estat칤sticas Calculadas:")
    st.dataframe(estatisticas)
    
    st.write("### Perfil Esquem치tico da Comunidade Florestal")
    perfil_path = gerar_perfil_esquematico(df)
    st.image(perfil_path, caption="Perfil Esquem치tico", use_container_width=True)
    
    if st.button("Gerar Relat칩rio"):
        relatorio_content = gerar_relatorio(df, estatisticas)
        st.markdown(download_link(relatorio_content, "Relatorio_Inventario.docx", "游늯 Baixar Relat칩rio"), unsafe_allow_html=True)
