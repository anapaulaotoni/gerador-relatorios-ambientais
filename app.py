import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from docx import Document
from io import BytesIO
import base64
import os
import scipy.stats as stats
from adjustText import adjust_text
import subprocess

def formatar_nome_cientifico(nome):
    """Abrevia a primeira palavra e mant√©m a segunda para nome cient√≠fico."""
    palavras = nome.split()
    if len(palavras) >= 2:
        return f"{palavras[0][0]}. {palavras[1]}"
    return nome

def processar_dados(uploaded_file):
    """Processa os dados do arquivo e gera estat√≠sticas."""
    df = pd.read_excel(uploaded_file)
    df = df.rename(columns={"scientific.name": "Esp√©cie", "CAP": "Di√¢metro (cm)", "HT": "Altura (m)"})
    
    # Converter colunas para num√©rico (evitar erro de string)
    df['Di√¢metro (cm)'] = pd.to_numeric(df['Di√¢metro (cm)'], errors='coerce')
    df['Altura (m)'] = pd.to_numeric(df['Altura (m)'], errors='coerce')
    
    # Remover linhas com valores nulos ap√≥s convers√£o
    df = df.dropna(subset=['Di√¢metro (cm)', 'Altura (m)'])
    
    df['Volume (m¬≥)'] = np.pi * (df['Di√¢metro (cm)'] / 200) ** 2 * df['Altura (m)']
    return df

def rodar_analise_r(abundancias):
    """Executa o script R e captura os resultados."""
    resultado = subprocess.run(["Rscript", "analises_florestais.R", abundancias], capture_output=True, text=True)
    return resultado.stdout
def gerar_perfil_esquematico(df):
    """Gera um gr√°fico de perfil esquem√°tico da floresta com nomes ajustados."""
    especies = df.groupby('Esp√©cie').agg({'Altura (m)': 'mean', 'Di√¢metro (cm)': 'mean'}).reset_index()
    especies['Esp√©cie'] = especies['Esp√©cie'].apply(formatar_nome_cientifico)
    
    fig, ax = plt.subplots(figsize=(8, 5))
    
    np.random.seed(42)
    especies['x_pos'] = np.linspace(0, 10, len(especies))
    
    text_objects = []
    for _, row in especies.iterrows():
        ellipse = plt.Circle((row['x_pos'], row['Altura (m)']), row['Di√¢metro (cm)']/30, color='green', alpha=0.7)
        ax.add_patch(ellipse)
        ax.plot([row['x_pos'], row['x_pos']], [0, row['Altura (m)']], color='brown', linewidth=2)
        text_objects.append(ax.text(row['x_pos'], row['Altura (m)'] + 0.5, row['Esp√©cie'], fontsize=8, fontstyle='italic', ha='center'))
    
    adjust_text(text_objects, arrowprops=dict(arrowstyle='-', color='black'))
    
    ax.set_xlim(-1, 11)
    ax.set_ylim(0, especies['Altura (m)'].max() + 2)
    ax.set_xlabel("Posi√ß√£o das √Årvores")
    ax.set_ylabel("Altura (m)")
    ax.set_title("Perfil Esquem√°tico da Comunidade Florestal")
    ax.grid(False)
    
    plt.savefig("perfil_esquematico.png", bbox_inches='tight', dpi=300)
    return "perfil_esquematico.png"

def gerar_relatorio(df):
    """Gera um relat√≥rio em Word com os resultados, incluindo gr√°ficos."""
    doc = Document()
    doc.add_heading('Relat√≥rio de Invent√°rio Florestal', level=1)
    doc.add_paragraph("Este relat√≥rio apresenta os resultados do invent√°rio florestal realizado.")
    
    # Adicionar Perfil Esquem√°tico
    perfil_path = gerar_perfil_esquematico(df)
    doc.add_picture(perfil_path, width=5000000, height=3000000)
    
    buffer = BytesIO()
    doc.save(buffer)
    return buffer.getvalue()

def download_link(content, filename, label):
    """Cria um link de download para o arquivo gerado."""
    b64 = base64.b64encode(content).decode()
    href = f'<a href="data:file/docx;base64,{b64}" download="{filename}">{label}</a>'
    return href

# Criando a Interface
st.title("Gerador de Relat√≥rios Ambientais")
st.write("Fa√ßa upload de um arquivo Excel contendo os dados do invent√°rio florestal.")

uploaded_file = st.file_uploader("Envie seu arquivo", type=["xlsx"])
if uploaded_file is not None:
    df = processar_dados(uploaded_file)
    st.write("Pr√©via dos dados:")
    st.dataframe(df.head())
    
    st.write("### Perfil Esquem√°tico da Comunidade Florestal")
    perfil_path = gerar_perfil_esquematico(df)
    st.image(perfil_path, caption="Perfil Esquem√°tico", use_container_width=True)
    
    if st.button("Gerar Relat√≥rio"):
        relatorio_content = gerar_relatorio(df)
        st.markdown(download_link(relatorio_content, "Relatorio_Inventario.docx", "üìÑ Baixar Relat√≥rio"), unsafe_allow_html=True)
